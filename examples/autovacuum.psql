\echo "Creating table to store information..."

CREATE SCHEMA IF NOT EXISTS av;

CREATE TABLE av.stats (
       pk int GENERATED ALWAYS AS IDENTITY
       , ts timestamp default current_timestamp
       , pid int
       , database text
       , relation text
       , command text
       , phase text
       , monitoring_event bigint default 0
       , PRIMARY KEY( pk )
);


CREATE SEQUENCE av.monitoring_seq;

/**
   * The procedure monitors the vacuum progress meter
   * and inserts a new log record into the table
   * to store the execution of the vacuum.
   *
   * Parameters are:
   * - seconds how long the procedure is going to run
   * - reset true if the table must be truncated before the execution starts
   * - pause_secs the number of secs to pause between scanning progress tables
   *
   * Use the debug level to see how many seconds have elapsed.
   */
CREATE OR REPLACE PROCEDURE
  av.p_log_vacuum( seconds int default 600,
                  reset boolean default true,
                  pause_secs int default 2 )
AS $CODE$
  DECLARE
  event_id bigint;
BEGIN

  event_id := nextval( 'av.monitoring_seq' );

  IF reset THEN
    TRUNCATE TABLE av.stats;
    COMMIT;
    RAISE INFO 'Truncated table av.stats';
  END IF;



  IF pause_secs IS NULL OR pause_secs <= 0 THEN
    pause_secs := 2;
  END IF;

  RAISE INFO 'Monitoring vacuum activity for % seconds every % secs', seconds, pause_secs;

  WHILE seconds > 0 LOOP
    INSERT INTO av.stats( ts, pid, database, relation, command, phase, monitoring_event )
    SELECT clock_timestamp()
           , pid, datname
           , format( '%I (%s)', coalesce( c.relname, '' ), relid )
           , '(auto) vacuum',  phase
           , event_id
      FROM pg_stat_progress_vacuum
             LEFT JOIN pg_class c on c.oid = relid
     WHERE pid IS NOT NULL;
                    

    INSERT INTO av.stats( ts, pid, database, relation, command, phase, monitoring_event )
    SELECT clock_timestamp()
           , pid, datname
           ,format( '%I (%s)', coalesce( c.relname, '' ), relid )
           , command,  phase
           , event_id
      FROM pg_stat_progress_cluster
              LEFT JOIN pg_class c on c.oid = relid
     WHERE pid IS NOT NULL;
    COMMIT;

    RAISE DEBUG '% ... zzz ...', seconds;
    PERFORM pg_sleep( pause_secs );
    seconds := seconds - pause_secs;
    END LOOP;
  END
       $CODE$ LANGUAGE plpgsql;
