#+TITLE:     Ruoli e Permessi
#+AUTHOR:    ing. Luca Ferrari, PhD
#+EMAIL:     fluca1978@gmail.com
#+DATE:      <2019-05-16 gio>
#+LANGUAGE:  it

#+OPTIONS:   H:3 num:nil toc:nil
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:

#+startup: beamer
#+LaTeX_CLASS: beamer
#+latex_header: \mode<beamer>{\usetheme{magpie}}


#+BEAMER_HEADER: \subtitle{Utenti, gruppi, grant, ecc.}

#+BEAMER_HEADER: \institute[fluca1978]{fluca1978\\\url{https://fluca1978.github.io}}
#+BEAMER_FRAME_LEVEL: 1



#+LATEX_HEADER: \RequirePackage{fancyvrb}
#+LATEX_HEADER: \DefineVerbatimEnvironment{verbatim}{Verbatim}{fontsize=\scriptsize}


* Licenza
*** Attribution-NonCommercial-ShareAlike 4.0
This work is licensed under the *Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License*.
To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/4.0/ or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.

* Ruoli
** Concetti Generali
*** Il concetto di Ruolo
*Un ruolo è un insieme di permessi (autorizzazioni)*, rappresenta quindi lo stereotipo di una collezione di ~GRANT~ e/o ~REVOKE~ sugli oggetti del database.

E' un concetto ovviamente astratto e la terminologia viene definita nello standard SQL.
*** Ruoli: Utenti e Gruppi
Dalla versione 8.1 in poi PostgreSQL non distingue piu' fra /utenti/ e /gruppi/ ma usa il concetto di *ruolo* che rappresenta entrambi:
- un ruolo può rappresentare un utente;
- ad un ruolo si possono aggiungere altri ruoli (e quindi rappresenta un gruppo).

*Per collegarsi ad un database occorre sempre un ruolo*, ossia un utente PostgreSQL (che è logicamente separato da quello del sistema operativo). Quando viene inizializzato un cluster viene creato un ruolo superutente per permetterne la gestione (tipicamente ~postgres~).

/Solitamente un gruppo non dispone del permesso di login/.

*** Ereditarietà dei ruoli
I ruoli possono ereditare da altri ruoli.
*Un ruolo che eredita (~INHERITS~) viene automaticamente dotato dei permessi dei ruoli di cui fa parte (quindi l'ereditarietà ha senso solo nel caso di ruoli).*
Nel caso di ruolo che non eredita, i permessi sono garantiti con richiesta esplicita.

*I permessi ereditati sono solo quelli concessi con una ~GRANT~ esplicita, non le opzioni particolari di profilazione di un ruolo (es. opzione di login, superuser, create database, ecc.).*

*** Ruoli ~ADMIN~
*I ruoli marcati come ~ADMIN~ non sono amministratori del database (il ruolo deve avere l'opzione ~SUPERUSER~)!*
Un ruolo ~ADMIN~ può aggiungere o rimuovere altri ruoli ad un gruppo.
*** Ruolo ~PUBLIC~
Il ruolo speciale ~PUBLIC~ rappresenta *tutti* i ruoli presenti e futuri.

Ogni ruolo dispone dell'unione dei suoi privilegi e di quelli concessi a ~PUBLIC~;
*** Ruolo proprietario
Ogni creatore di un oggetto di database ne è il /proprietario/. Il proprietario ha diritto di vita e di morte sull'oggetto (e quindi può eseguirne il ~DROP~ e ~ALTER~).
*Non esiste un privilegio di ~DROP~ e di ~ALTER~ e quindi solo il proprietario può alterare la definizione di un oggetto*. E' però possibile cambiare il proprietario con ~REASSIGN~.
*** ~SESSION_USER~ vs ~CURRENT_USER~
PostgreSQL definisce due variabili speciali:
- ~SESSION_USER~ corrisponde all'utente che ha effettuato la connessione al database;
- ~CURRENT_USER~ (o anche ~CURRENT_ROLE~) corrisponde all'utente attuale (eventualmente modificato con un ~SET ROLE~).
La distinzione è analoga a quella che in Unix si ha per il /setuid/!
#+begin_src sql
% psql -U harry testdb

testdb=> SET ROLE group_read;
testdb=> SELECT current_user, session_user;
 current_user | session_user
--------------+--------------
 group_read   | harry
(1 row)
#+end_src
** Interazione SQL
*** Comandi SQL
I comandi SQL per la gestione dei ruoli seguono la prassi /create, drop, alter/:
- ~CREATE ROLE~ per creare un nuovo ruolo;
- ~ALTER ROLE~ per modificare un ruolo esistente;
- ~DROP ROLE~ per eliminare un ruolo.

Le opzioni di ~CREATE ROLE~ si trovano anche in ~ALTER ROLE~ e sono quasi tutti flag booleani con una opzione ~NOxxx~ per negare l'opzione.

A quesi si aggiungono i comandi:
- ~GRANT~ per assegnare dei permessi ad un ruolo;
- ~REVOKE~ per rimuovere dei permessi ad un ruolo.
*** Opzioni principali di ~CREATE ROLE~ (e di ~ALTER ROLE~)
Le opzioni per l'amministrazione/gestione dei database sono:
- ~SUPERUSER~ definisce un amministratore del cluster;
- ~CREATEDB~ permette la creazione di nuovi database;
- ~LOGIN~ consente di effettuare login interattivo;
- ~CREATROLE~ consente di creare nuovi utenti/gruppi.
*** Opzioni per la gestione dei gruppi
Le principali opzioni per la gestione dei gruppi sono:
- ~IN <ruolo>~ aggiunge il ruolo ad un gruppo;
- ~ROLE <ruolo>~ aggiunge il ruolo specificato a quello che si sta creando, definendo quindi un gruppo;
- ~ADMIN <ruolo>~ indica che il ruolo che si sta creando è amministratore del ruolo specificato.
*** Opzioni per la password
La principale opzione è ~PASSWORD~ che può essere composta da:
- ~PASSWORD <password>~ memorizza cifrata la password specificata come testo semplice;
- ~ENCRYPTED PASSWORD <password>~ memorizza la password fornita già cifrata;
- ~PASSWORD NULL~ *(default)* non imposta la password, prevenendo il login;
- ~VALID UNTIL~ indica la data ove la password espira e non è piu' accettata come valida per il login interattivo.

Di fatto le opzioni ~PASSWORD NULL~ e ~NOLOGIN~ sono equivalenti (ai fini pratici).

*** Opzioni di sicurezza varia
- ~BYPASSRLS~ indica che l'utente è /immune/ alla /Row Level Security/;
- ~CONNECTION LIMIT~ limita il numero massimo di connessioni che un utente può aprire verso il cluster;
- ~REPLICATION~ indica che il ruolo può collegarsi al cluster anche quando è in fase di replica (logica o fisica) e che può creare degli slot di replica.
*** Catalogo dei ruoli: ~pg_authid~
Il catalogo ~pg_authid~ contiene le informazioni di profilazione e autenticazione dei ruoli, comprensive di password (cifrate).
#+begin_src sql
# SELECT rolname, rolcreatedb, rolinherit, rolpassword
  FROM pg_authid WHERE rolname = 'luca';
 rolname | rolcreatedb | rolinherit |             rolpassword
---------+-------------+------------+-------------------------------------
 luca    | f           | t          | md5bd18b4163ec8a3ad833d867a5933c8ec
#+end_src
La password ha una indicazione dell'algoritmo usato (es. ~md5~).
/Se la password non inizia con ~md5~ o ~SCRAM-SHA-256$~ è da intendersi *non cifrata*/.

*** Vedere i ruoli: ~pg_roles~
La vista ~pg_roles~ rende pubblicamente visibili le informazioni dei ruoli presenti nel sistema, eccezion fatta per la password:

#+begin_src sql
# SELECT rolname, rolsuper, rolcreatedb, rolcanlogin
  FROM pg_roles;
       rolname        | rolsuper | rolcreatedb | rolcanlogin
----------------------+----------+-------------+-------------
 pg_monitor           | f        | f           | f
 pg_read_all_settings | f        | f           | f
 pg_read_all_stats    | f        | f           | f
 pg_stat_scan_tables  | f        | f           | f
 pg_signal_backend    | f        | f           | f
 postgres             | t        | t           | t
#+end_src

E' possibile creare utenti/gruppi/ruoli con privilegi di super utente, possibilità di creare nuovi
database e di collegarsi o no al cluster.

*** Gestione delle password: ~pg_roles~
Analogamente ad un sistema Unix, le password contenute in ~pg_roles~ sono /mascherate/ anche ad un utente amministratore:

#+begin_src sql
# SELECT rolname, rolpassword FROM pg_roles;
          rolname          | rolpassword
---------------------------+-------------
 ur                        | ********
 u1                        | ********
 professors                | ********
 students                  | ********
 severus                   | ********
 albus                     | ********
#+end_src
*** Gestione delle password: ~pg_shadow~
La vista ~pg_shadow~ esiste per retrocompatibilità con versioni precedenti di PostgreSQL (prima della ~8.1~) e rappresenta un estratto del catalogo ~pg_authid~ con relative password.

*** Riassunto delle interazioni SQL
| Comando                              | Descrizione                                               |
|--------------------------------------+-----------------------------------------------------------|
| ~CREATE ROLE~                        | Aggiunge un nuovo ruolo e permette una prima profilazione |
| ~ALTER ROLE~                         | Modifica un ruolo esistente (password e/o profilazione)   |
| ~DROP ROLE~                          | Rimuove un ruolo esistente                                |
| ~GRANT~, ~REVOKE~                    | Aggiunge/rimuove permessi e gruppi ad un ruolo            |
| ~DROP OWNED BY~, ~REASSIGN OWNED BY~ | Utili per gestire le dipendenze                           |
|--------------------------------------+-----------------------------------------------------------|
*** Cataloghi SQL utili
| Catalogo         | Descrizione                                              |
|------------------+----------------------------------------------------------|
| ~pg_authid~      | Contiene il catalogo dei ruoli con relative password.    |
| ~pg_roles~       | Versione pubblica senza password.                        |
| ~pg_shadow~      | Mostra ~pg_authid~ solo degli utenti abilitati al login. |
| ~pg_default_acl~ | Mostra i permessi di default                             |
** Principali comandi Shell
*** Il comando ~createuser~
Nelle moderne versioni di PostgreSQL il comando shell ~createuser~ permette la creazione di un ruolo (utente e/o gruppo).

Ad esempio per creare l'utente ~miguel~ con permesso di login e nessuna password impostata:
#+begin_src shell
% createuser --login -U postgres miguel
#+end_src

E' possibile eseguire il comando anche in modalità interattiva, simile ai programmi di gestione degli utenti dei sistemi Unix:

#+begin_sc shell
% createuser  -U postgres --interactive
Enter name of role to add: miguel
Shall the new role be a superuser? (y/n) n
Shall the new role be allowed to create databases? (y/n) n
Shall the new role be allowed to create more new roles? (y/n) n
#+end_src

*** Il comando ~dropuser~
Il comando shell ~dropuser~ permette l'eliminazione di un ruolo dal database:

#+begin_src shell
% dropuser -U postgres miguel
#+end_src

E' possibile usarlo con il flag ~--interactive~ per fare in modo che il programma chieda conferma dell'eliminazione ed eventualmente il ruolo da eliminare.

* Esempi sui ruoli
** Ruoli e Permessi
*** Ambiente di prova
Si supponga di avere una tabella alla quale sono rimossi tutti i permessi (nessuno può operarvi sopra):

#+begin_src sql
# CREATE TABLE t_perms( v int );
# REVOKE ALL ON t_perms FROM PUBLIC;
#+end_src
*** Creazione dei gruppi
Si supponga di voler creare un gruppo di sola lettura, uno di inserimento/modifica e uno di cancellazione per la tabella di esempio:

#+begin_src sql
# CREATE ROLE group_read   WITH NOLOGIN NOINHERIT;
# CREATE ROLE group_write  WITH NOLOGIN NOINHERIT;
# CREATE ROLE group_delete WITH NOLOGIN NOINHERIT;

# GRANT SELECT        ON t_perms TO group_read;
# GRANT INSERT,UPDATE ON t_perms TO group_write;
# GRANT DELETE        ON t_perms TO group_delete;
#+end_src

*** Creazione di un utente in un gruppo
E' possibile specificare con ~IN ROLE~ a quale gruppo un utente appartiene, oppure fornire la ~GRANT~ di un ruolo ad un altro.

#+begin_src sql
# CREATE ROLE harry WITH LOGIN IN ROLE group_read;

-- oppure equivalentemente
# CREATE ROLE harry WITH LOGIN;
# GRANT group_read TO harry;
#+end_src

/Non si può modificare la composizione di un gruppo con un ~ALTER ROLE~!/

*** Permessi in azione: lettura
L'utente ~harry~ può leggere la tabella ma non può inserirvi ovviamente nuovi record.
#+begin_src sql
testdbtestdb=> SELECT current_role;
 current_role
--------------
 harry
(1 row)

testdb=> INSERT INTO t_perms( v ) VALUES( 1 );
ERROR:  permission denied for table t_perms
testdb=> SELECT * FROM t_perms;
 v
---
(0 rows)
#+end_src
*** Permessi in azione: scrittura
Se si aggiunge il gruppo ~group_write~ all'utente ~harry~ si possono effettuare scritture sulla tabella.
#+begin_src sql
# GRANT group_write TO harry;

testdb=> SELECT current_role;
 current_role
--------------
 harry
(1 row)

testdb=> INSERT INTO t_perms( v ) VALUES( 1 );
INSERT 0 1
#+end_src

*** Cancellazione di un ruolo
Il comando ~DROP ROLE~ (eventualmente con ~IF EXISTS~) consente di eliminare un ruolo, ma questo è possibile solo se il ruolo non ha oggetti associati (ad esempio privilegi).

#+begin_src sql
 DROP ROLE group_write;
ERROR:  role "group_write" cannot be dropped because some objects depend on it
DETAIL:  privileges for table t_perms
#+end_src

Un trucco rapido consiste nel cancellare tutti gli oggetti posseduti da un ruolo:
#+begin_src sql
# DROP OWNED BY group_write;
# DROP ROLE group_write;
#+end_src

*** Permessi in azione: innestamento
Si aggiunge il ruolo ~group_delete~ al ruolo ~group_write~, e quindi di riflesso a ~harry~ che fa parte dell'ultimo. Tuttavia il permesso non è usabile dall'utente ~harry~!

#+begin_src sql
# GRANT group_delete TO group_write;

testdb=> SELECT current_role;
 current_role
--------------
 harry
(1 row)

testdb=> INSERT INTO t_perms( v ) VALUES( 2 );
INSERT 0 1
testdb=> DELETE FROM t_perms;
ERROR:  permission denied for table t_perms
#+end_src
*** Innestamento dei ruoli: ~SET ROLE~
L'utente deve esplicitamente cambiare gruppo per poter prendere i permessi di quel gruppo, e ciò avviene con ~SET ROLE~.
#+begin_src sql
testdb=> SET ROLE group_delete;
SET
testdb=> SELECT current_role;
 current_role
--------------
 group_delete
(1 row)

testdb=> DELETE FROM t_perms;
DELETE 2
#+end_src
*** ~INHERITS~ e l'innestamento dei ruoli
Nelle versioni obsolete di PostgreSQL (prima della 10.1) l'opzione ~INHERITS~ non era il default, nelle versioni recenti ~INHERTIS~ è sempre il default.
*** Esempio con ~INHERITS~
Se i gruppi fossero stati creati con ~INHERITS~ (clausola di default) i permessi sarebbero stati forniti direttamente.
#+begin_src sql
# CREATE ROLE group_read   WITH NOLOGIN INHERIT;
# CREATE ROLE group_write  WITH NOLOGIN INHERIT;
# CREATE ROLE group_delete WITH NOLOGIN INHERIT;

# GRANT SELECT        ON t_perms TO group_read;
# GRANT INSERT,UPDATE ON t_perms TO group_write;
# GRANT DELETE        ON t_perms TO group_delete;

# GRANT group_read  TO harry;
# GRANT group_write TO harry;

# GRANT group_delete TO group_write;
#+end_src

*** Esempio con ~INHERITS~: risultato
Siccome ~group_write~ /eredita/ da ~group_delete~ allora il primo ha il permesso di cancellazione.
Transativamente, siccome ~harry~ eredita da ~group_write~ si ha che il permesso di cancellazione è consentito anche a tale utente.

#+begin_src sql
testdb=> SELECT current_role;
 current_role
--------------
 harry
(1 row)

testdb=> INSERT INTO t_perms( v ) VALUES( 3 );
INSERT 0 1
testdb=> DELETE FROM t_perms;
DELETE 1
#+end_src

*** Esempio con ~INHERITS~ parziale
Immaginiamo di aver creato i ruoli come segue:
#+begin_src sql
# CREATE ROLE group_read   WITH NOLOGIN INHERIT;
# CREATE ROLE group_write  WITH NOLOGIN NOINHERIT; -- non si eredita
# CREATE ROLE group_delete WITH NOLOGIN INHERIT;

# GRANT SELECT        ON t_perms TO group_read;
# GRANT INSERT,UPDATE ON t_perms TO group_write;
# GRANT DELETE        ON t_perms TO group_delete;

# GRANT group_read  TO harry;
# GRANT group_write TO harry;

# GRANT group_delete TO group_write;
#+end_src

*** Esempio con ~INHERITS~ parziale: risultato
#+begin_src sql
testdb=> SELECT current_role;
 current_role
--------------
 harry
(1 row)

testdb=> DELETE FROM t_perms;
ERROR:  permission denied for table t_perms

testdb=> SET ROLE group_write;
SET
testdb=> DELETE FROM t_perms;
ERROR:  permission denied for table t_perms

testdb=> SET ROLE group_delete;
SET
testdb=> DELETE FROM t_perms;
DELETE 0
#+end_src

** Amministrazione dei gruppi
*** Esempio di ~ADMIN~: aggiungere un ruolo ad un gruppo
Senza il flag ~ADMIN~ non si possono aggiungere altri ruoli ad un gruppo.
#+begin_src sql
testdb=> SELECT current_role;
 current_role
--------------
 group_delete
(1 row)

testdb=> GRANT group_read TO group_write;
ERROR:  must have admin option on role "group_read"
#+end_src
*** Esempio di ~ADMIN~ (funzionante): aggiungere un ruolo ad un gruppo
#+begin_src sql
# CREATE ROLE group_read WITH NOLOGIN ADMIN harry;
-- harry amministra il gruppo group_read

testdb=> SELECT current_role;
 current_role
--------------
 harry
(1 row)

testdb=> GRANT group_read TO group_write;
GRANT ROLE
#+end_src
*** ~ADMIN~ e ~WITH ADMIN OPTION~
Se non si inserisce al momento della creazione di un ruolo il suo amministratore si può sempre agire con una ~GRANT~ successiva:

#+begin_src sql
# CREATE ROLE group_read WITH NOLOGIN ADMIN harry;
-- equivalente a ...
# CREATE ROLE group_read WITH NOLOGIN;
# GRANT group_read TO harry WITH ADMIN OPTION;
#+end_src

** Permessi di default
*** ~ALTER DEFAULT PRIVILEGES~
E' possibile modificare i permessi di /default/ di oggetti che verranno creati (*non di quelli già esistenti!*).
Di fatto con ~ALTER DEFAULT PRIVILEGES~ si impostano le ~GRANT~ e ~REVOKE~ che saranno eseguiti quando un oggetto sarà creato.

Siccome gli oggetti non esistono ancora ci si rifersce ad essi con la tiplogia, es. ~TABLES~, ~FUNCTIONS~, ecc.
*** Esempio di ~ALTER DEFAULT PRIVILEGES~
#+begin_src sql

testdb=> SELECT current_role;
 current_role
--------------
 harry
(1 row)
testdb=> ALTER DEFAULT PRIVILEGES
   REVOKE INSERT ON TABLES
   FROM group_write;

testdb=> CREATE TABLE t_perms_ext( v int );
#+end_src
*** Esempio di ~ALTER DEFAULT PRIVILEGES~: effetti
#+begin_src sql
testdbtestdb=> SELECT current_role;
 current_role
--------------
 luca
(1 row)

testdbtestdb=> INSERT INTO t_perms_ext( v ) VALUES ( 2 );
ERROR:  permission denied for table t_perms_ext
#+end_src
*** Vedere i permessi di default
E' possibile usare il comando ~\ddp~ all'interno di ~psql(1)~ per vedere i privilegi di default.
#+begin_src sql
testdb=> \ddp
          Default access privileges
 Owner | Schema | Type  |  Access privileges
-------+--------+-------+---------------------
 harry |        | table | =r/harry
       |        |       | harry=arwdDxt/harry
       |        |       | group_read=r/harry
#+end_src

I privilegi di default sono memorizzati come ACL nel catalogo ~pg_default_acl~.

* ~pg_hba.conf~
** Connessione al database
La connessione ad un database avviene attraverso un filtro /Host Based Access/: deve essere garantito il permesso di connessione dall'host sorgente, dal ruolo (~LOGIN~ option) e al database specifico.
Il file ~pg_hba.conf~ contiene le informazioni di login.

*E' sufficiente un ~SIGHUP~ per far riconoscere al cluster le modifiche ai permessi di connessione!*
** Gruppi & login
Per usare un gruppo si deve indicare il nome del gruppo con il simbolo ~+~ (chi si ricorda di NIS?):
#+begin_src shell
host all luca        127.0.0.1/32 trust
host all +group_read 127.0.0.1/32 trust
#+end_src

L'utente ~luca~ ha accesso, tutti gli utenti che appartengono al gruppo ~group_read~ (quindi anche ~harry~) hanno accesso.

Lo stesso si può scrivere come:
#+begin_src shell
host all luca,+group_read 127.0.0.1/32 trust
#+end_src
** La vista ~pg_hba_file_rules~
La vista ~pg_hba_file_rules~ consente di effettuare il /debugging/ delle impostazione di autenticazione e di capire chi può collegarsi al database. La colonna ~error~ indica se la particolare riga risulta in errore.

#+begin_src sql
# SELECT line_number,error, database,
  user_name, address, netmask, auth_method
  FROM pg_hba_file_rules;

line_number | 88
error       |
database    | {all}
user_name   | {+group_read}
address     | 127.0.0.1
netmask     | 255.255.255.255
auth_method | trust
#+end_src
** Usare ~pg_hba_file_rules~ per trovare gli errori
#+begin_src sql
# SELECT line_number, error
  FROM pg_hba_file_rules
  WHERE error IS NOT NULL;
-[ RECORD 1 ]-----------------------------------------
line_number | 88
error       | invalid authentication method "trustme!"
#+end_src

la linea ~88~ presenta qualche errore

#+begin_src shell
% sudo head -n 88 $PGDATA/pg_hba.conf | tail -n 1
host all +group_read 127.0.0.1/32 trustme!
#+end_src

* ACL
** Access Control List
PostgreSQL memorizza i permessi dati con ~GRANT~ come /Access Contol List (ACL)/.

Ogni ACL (~aclitem~)  è formata da tre parti:
- *utente a cui i privilegi si riferiscono*;
- *stringa dei permessi* (simile a quella dei file Unix);
- *utente che ha concesso il permesso*.

Le ACL sono memorizzate come array ~aclitem[]~ in ~pg_class~.
** ACL vuote
Inizialmente ogni oggetto ha una ACL vuota, che si interpreta come /permessi di default/ (ossia permessi al proprietario e per gli altri ~PUBLIC~).
Quando viene effettuata una ~GRANT~ esplicita si introduce una entry ACL con tutti i permessi del proprietario, oltre alla ACL specifica.
** La stringa dei permessi
Ogni lettera nella stringa ACL si riferisce ad un permesso specifico:
#+begin_src shell
r -- SELECT ("read")        t -- TRIGGER
w -- UPDATE ("write")       X -- EXECUTE
a -- INSERT ("append")      U -- USAGE
d -- DELETE                 C -- CREATE
D -- TRUNCATE               c -- CONNECT
x -- REFERENCES             T -- TEMPORARY
          arwdDxt -- ALL PRIVILEGES
#+end_src
*** Vedere i permessi concessi: ~\dp~
I permessi vengono memorizzati internamente mediante delle Access Control List.
E' possibile vedere i permessi concessi con il comando ~psql(1)~ *~\dp~*.
#+begin_src sql
# \dp t_perms
Access privileges
-[ RECORD 1 ]-----+--------------------------
Schema            | public
Name              | t_perms
Type              | table
Access privileges | postgres=arwdDxt/postgres+
                  | group_write=aw/postgres
#+end_src
*** Interpretare la stringa ACL
La stringa ~group_write=aw/postgres~ si interpreta come segue: l'utente ~group_write~ *ha* il permesso di ~INSERT~ (~a~) e di ~UPDATE~ (~w~) sulla tabella ~t_perms~ concessogli dal ruolo ~postgres~.

La stringa ~postgres=arwdDxt/postgres+~ indica che l'utente ~postgres~ *ha tutti i permessi* (~arwdDxt~) sulla tabella ~t_perms~, i permessi sono stati concessi dall'utente stesso (quindi è il proprietario), che ha il permesso di concedere altri permessi (~+~).
*** Un esempio piu' complesso di uso di ~\dp~
 #+begin_src sql
 > \dp soci

 Access privileges | conoscerelinux=arwdDxt/conoscerelinux
 Column privileges | nome:                                      +
                   |   enrico=r/conoscerelinux                  +
                   | data_associazione:                         +
                   |   enrico=w/conoscerelinux
 Policies          | mypol:                                     +
                   |   (u): (data_associazione IS NOT NULL)     +
                   |   (c): (lower(nome) = (CURRENT_USER)::text)+
                   |   to: enrico

 #+end_src
*** Decodificare a mano i permessi (con CTE e string manipulation)
#+begin_src sql
> WITH acl AS (
   -- 1) si estraggono le ACL come tuple di stringhe
   SELECT unnest( relacl::text[] ) AS acl
   FROM pg_class
   WHERE relname = 't_perms'
   AND relkind = 'r'
)
#+end_src
*** Decodificare a mano i permessi (con CTE e string manipulation) (2)
#+begin_src sql
 ,split_acl AS (
   -- 2) si estraggono i singoli pezzi della ACL
   -- separando dove vi sono i simboli '=' e '/'
    SELECT acl,
     position( '=' in acl ) AS equal_at,
     substring( acl from 1
              for position( '=' in acl ) - 1 )
              AS granted_to,
     substring( acl from
              position( '=' in acl ) + 1
              for position( '/' in acl )
                  - position( '=' in acl ) - 1 )
              AS granted_what,
     substring( acl from
                 position( '/' in acl ) + 1 )
              AS grantee
    FROM acl
 )
#+end_src
*** Decodificare a mano i permessi (con CTE e string manipulation) (3)
#+begin_src sql
 , decode_acl AS (
   SELECT CASE
          WHEN position( 'r' in granted_what ) > 0
          THEN 'SELECT' END
         ,CASE
          WHEN position( 'd' in granted_what ) > 0
          THEN 'DELETE' END
         ,CASE
          WHEN position( 'D' in granted_what ) > 0
          THEN 'TRUNCATE' END
          -- e così via
   , * FROM split_acl
)

-- query finale
SELECT * FROM decode_acl;
#+end_src
* Permessi di colonna
** ~GRANT~ di colonna
E' possibile specificare una ~GRANT~ con permesso ~SELECT~ e/o ~UPDATE~ di colonna.
#+begin_src sql
# ALTER TABLE t_perms ADD COLUMN i int;
# REVOKE SELECT ON t_perms FROM harry;
# GRANT SELECT(v) ON t_perms TO harry;
#+end_src

#+begin_src sql
testdb=> SELECT current_role;
 current_role
--------------
 harry
(1 row)

testdb=> SELECT * FROM t_perms;
ERROR:  permission denied for table t_perms
testdb=> SELECT v FROM t_perms;
 v
---
 1
 2
(2 rows)
#+end_src

* Row Level Security
** Row Level Security
E' possibile specificare, tabella per tabella, una sicurezza a livello di tupla, denominata /Row Level Security/.

La Row Level Security si basa su delle /policy/ che devono discriminare quali dati mostrare/nascondere. Se nessuna policy viene creata si usa un default di /deny all/.

*ATTENZIONE: è bene concedere i permessi di riga solo dopo aver assegnato i permessi ~GRANT~ normali!*

** Row Level Security: esempio
#+begin_src sql
> CREATE POLICY view_maggiorenni
  ON persona
  FOR SELECT  -- quale statement?
  TO PUBLIC   -- quale ruolo ?
  USING  (eta >= 18); -- condizione di SELECT

> ALTER TABLE persona ENABLE ROW LEVEL SECURITY;
#+end_src
e come altro utente si vedranno solo le tuple che soddisfano ~USING~.
** Row Level Security: spiegazione
Anzitutto l'utente che effettua lo statement deve avere le opportune ~GRANT~. *Il proprietario dell'oggetto non è soggetto alle policy*.

Nel caso di statement ~SELECT~ la condizione è data da ~USING~, nel caso di ~INSERT~ o ~UPDATE~ da ~CHECK~, e si può combinare tutto quanto assieme:

#+begin_src sql
> CREATE POLICY handle_maggiorenni
  ON persona
  FOR ALL                  -- SELECT, UPDATE, DELETE, INSERT
  TO PUBLIC                -- quale ruolo ?
  USING  (eta >= 18)       -- condizione di SELECT
  WITH CHECK (eta >= 18);  -- condizione DML
#+end_src
** Row Level Security: un altro esempio
Tipicamente questo meccanismo viene usato per nascondere le tuple di altri utenti:

#+begin_src sql
> CREATE POLICY handle_my_tuples
  ON usernames
  FOR ALL                              -- SELECT, UPDATE, DELETE, INSERT
  TO PUBLIC                            -- quale ruolo ?
  USING  (usernam = CURRENT_USER)      -- condizione di SELECT
  WITH CHECK (usernam = CURRENT_USER); -- condizione DML
#+end_src
